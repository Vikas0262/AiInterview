import React, { useState, useRef, useEffect, useCallback } from 'react';
import { auth } from '../Firebase';
import {
  FiArrowLeft,
  FiMic,
  FiMicOff,
  FiVideo,
  FiVideoOff,
  FiPhone,
  FiMessageSquare
} from 'react-icons/fi';
import { useNavigate } from 'react-router-dom';
import ChatWithAvatar from '../components/ChatWithAvatar';
import AnimatedAvatar from '../components/AnimatedAvatar';

// Gemini API client
const GEMINI_API_KEY = import.meta.env.VITE_GEMINI_API_KEY;
const GEMINI_API_URL = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent';

// Speech recognition setup
const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
const recognition = SpeechRecognition ? new SpeechRecognition() : null;

if (recognition) {
  recognition.continuous = true;
  recognition.interimResults = true;
  recognition.lang = 'en-US';
}

const Interview = () => {
  // State management
  const [user, setUser] = useState(null);
  const [isInChatMode, setIsInChatMode] = useState(false);
  const [isMuted, setIsMuted] = useState(true);
  const [micError, setMicError] = useState(null);
  const [isVideoOn, setIsVideoOn] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [showEndCallConfirm, setShowEndCallConfirm] = useState(false);
  const [chatMessages, setChatMessages] = useState([]);
  const [hasGreeted, setHasGreeted] = useState(false);

  // Refs and hooks
  const videoRef = useRef(null);
  const navigate = useNavigate();

  // Add initial greeting when component mounts
  useEffect(() => {
    console.log('Component mounted, adding greeting...');
    
    if (!hasGreeted) {
      const greetingMessage = {
        id: 1,
        sender: 'AI',
        message: 'Hello! Welcome to your interview. I will be your interviewer today. Please enable your microphone and camera when you are ready to begin.',
        time: new Date().toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' }),
        isSpeaking: true
      };

      setChatMessages([greetingMessage]);
      setHasGreeted(true);
      
      // Speak the greeting after a short delay
      const timer = setTimeout(() => {
        console.log('Speaking greeting...');
        window.speechSynthesis.cancel();
        const speech = new SpeechSynthesisUtterance(greetingMessage.message);
        
        speech.onend = () => {
          console.log('Finished speaking greeting');
          setChatMessages(prev =>
            prev.map(msg =>
              msg.id === greetingMessage.id ? { ...msg, isSpeaking: false } : msg
            )
          );
        };
        
        speech.onerror = (e) => {
          console.error('SpeechSynthesis error:', e);
        };
        
        window.speechSynthesis.speak(speech);
      }, 1000);
      
      return () => clearTimeout(timer);
    }
  }, [hasGreeted]);

  // ... rest of the component code remains the same ...

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Main Content Area */}
      <div className="flex-1 flex flex-col">
        {/* Header */}
        <header className="bg-white shadow-sm p-4 flex items-center justify-between">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => window.history.back()}
              className="p-2 hover:bg-gray-100 rounded-full"
              aria-label="Back"
            >
              <FiArrowLeft className="w-5 h-5 text-gray-600" />
            </button>
            <div>
              <h1 className="font-semibold text-lg">AI-Powered Interview</h1>
              <p className="text-sm text-gray-500">
                {isInChatMode ? 'Chat Mode' : 'Video Interview'}
              </p>
            </div>
          </div>
          <button
            onClick={toggleChatMode}
            className="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700 text-sm flex items-center space-x-2"
          >
            <FiMessageSquare className="w-4 h-4" />
            <span>{isInChatMode ? 'Switch to Video' : 'Switch to Chat'}</span>
          </button>
        </header>

        {/* Rest of your JSX */}
        {isInChatMode ? (
          <div className="bg-white rounded-lg shadow-lg flex-1 flex flex-col overflow-hidden">
            <ChatWithAvatar
              messages={chatMessages}
              onSendMessage={handleSendMessage}
              isLoading={isProcessing}
            />
          </div>
        ) : (
          // Your video interface here
          <div className="bg-gray-800 rounded-lg flex-1 relative overflow-hidden flex items-center justify-center">
            {/* Video feed and controls */}
          </div>
        )}
      </div>
    </div>
  );
};

export default Interview;
